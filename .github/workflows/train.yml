name: Train Model

on:
  push:
    branches:
      - main
    # paths:
    #     - 'model_train.py'
    #     - 'utils.py'
jobs:
  train:
    runs-on: gpu-p100
    env:
      DATASET_EXISTS: ''

    steps:
      - name: Manage Dataset Volume and Download
        id: manage_dataset
        run: |
          docker run -d --rm --name tensorflow_container \
            -v food11_data:/tmp/content/Food-11 \
            -v saved_models:/tmp/temp_models \
            -w /workspace \
            tensorflow/tensorflow:latest-gpu tail -f /dev/null

            docker exec tensorflow_container bash -c "
            apt-get update && apt-get install -y git;
            if [ -d 'workspace/src/image-classification-continuous-x' ]; then
              echo 'Repository already exists. Updating...';
              cd /workspace/image-classification-continuous-x && git pull origin main;
            else
              echo 'Cloning repository...';
              git clone https://github.com/tin2294/image-classification-continuous-x.git workspace/src/image-classification-continuous-x;
            fi
          "

          if docker exec tensorflow_container bash -c "[ -d '/tmp/content/Food-11' ] && [ \"\$(ls -A /tmp/content/Food-11)\" ]"; then
            echo "Volume 'food11_data' already contains data. Skipping download."
          else
            echo "Volume 'food11_data' is empty. Downloading dataset."

            docker exec tensorflow_container bash -c "
              set -e;
              echo 'Downloading and setting up dataset...';
              mkdir -p /tmp/content/Food-11 && \
              apt-get update && \
              pip3 install gdown && \
              gdown https://drive.google.com/uc?id=1dt3CD3ICdLbTf80sNJ25TPBDKu_qyCnq -O /tmp/content/Food-11/dataset.zip && \
              unzip /tmp/content/Food-11/dataset.zip -d /tmp/content/Food-11 && \
              echo 'Dataset downloaded and unzipped. Files included:' && \
              ls -la /tmp/content/Food-11;
            "
          fi

      - name: Install Dependencies
        run: |
          docker exec tensorflow_container pip install -r workspace/src/image-classification-continuous-x/requirements_docker.txt

      - name: Organize Data
        run: |
          if docker exec tensorflow_container bash -c "[ -d '/tmp/content/Food-11/training/class_00' ]"; then
            echo "Dataset is already organized. Skipping organization step."
          else
            echo "Dataset is not organized. Organizing now..."
            docker exec tensorflow_container python workspace/src/image-classification-continuous-x/organize_data.py
          fi

      - name: Run Training Script
        run: |
          docker exec tensorflow_container python workspace/src/image-classification-continuous-x/model_train.py
        env:
          STORAGE_PATH: /home/cc/models

      - name: Set Accuracy as Environment Variable
        run: |
          EVALUATION_ACCURACY=$(docker exec tensorflow_container cat /tmp/temp_models/evaluation_metrics.txt | grep "evaluation_accuracy" | cut -d' ' -f2)
          EVALUATION_LOSS=$(docker exec tensorflow_container cat /tmp/temp_models/evaluation_metrics.txt | grep "evaluation_loss" | cut -d' ' -f2)
          echo "Extracted evaluation_accuracy: $EVALUATION_ACCURACY"
          echo "Extracted evaluation_loss: $EVALUATION_LOSS"
          echo "ACCURACY=$EVALUATION_ACCURACY" >> $GITHUB_ENV
          echo "LOSS=$EVALUATION_LOSS" >> $GITHUB_ENV

      - name: Generate SSH Key
        run: |
          ssh-keygen -t rsa -b 4096 -C "tcz212@nyu.edu" -f /home/cc/.ssh/id_rsa -N ""

      - name: Add SSH Public Key to Node-0
        env:
          NODE_0_IP: 129.114.25.151
        run: |
          PUB_KEY=$(cat /home/cc/.ssh/id_rsa.pub)
          echo "Adding SSH key to remote server"
          ssh -vvv cc@${NODE_0_IP} "mkdir -p ~/.ssh && echo '${PUB_KEY}' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"

      - name: Add SSH Host to known_hosts
        run: |
          ssh-keyscan 129.114.25.151 >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: Test SSH Connection
        env:
          NODE_0_IP: 129.114.25.151
        run: |
          ssh -o StrictHostKeyChecking=no cc@${NODE_0_IP} "echo 'SSH connection to Node-0 successful!'"
  
      - name: Rsync model store from GPU to Node-0
        env:
          NODE_0_IP: 129.114.25.151
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" /tmp/volume_backup.tar.gz cc@${NODE_0_IP}:/tmp/

      - name: Stop Container
        run: |
          docker stop tensorflow_container

      # - name: Move model store from volume to the server filesystem
      #   run: |
      #     docker run --rm -v saved_models:/volume -v /tmp:/backup busybox tar czf /backup/volume_backup.tar.gz -C /volume .

  # evaluate:
  #   runs-on: gpu-p100

  redeploy:
    runs-on: node-0
    needs: train
    # fix accuracy threshold and other conditions
    if: success()
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # need to remove model_storage first here, does not work w model store????
      - name: Checkout repository
        uses: actions/checkout@v2

      # - name: Move last model store to volume
      #   run: |
      #     docker run --rm -v models:/volume -v /tmp:/backup busybox cp -r /backup/ /volume/
      #     echo "Checking volume content:"
      #     docker run --rm -v models:/volume busybox ls /volume

      # - name: Copy model store from Docker volume to host filesystem
      #   run: |
      #     mkdir -p ./model_storage
      #     rm -f ./model_storage/operatorai*
      #     docker run --rm -v models:/volume -v $(pwd)/model_storage:/model_storage busybox sh -c "cp -r /volume/operatorai* /model_storage/"
      #     echo "Model store copied to ./model_storage"
      #     ls ./model_storage

      # - name: Install Modelstore
      #   run: |
      #     pip install -r 

      # - name: Download Model with specific version and copy to ml-app directory (/home/cc/k8s-ml/app/model.keras)
      #   run: |

      - name: Build and push new Docker image
        run: |
          docker build -t node-0:5000/ml-app:latest /home/cc/k8s-ml/app
          docker push node-0:5000/ml-app:latest

      - name: Redeploy ML App (set image to redeploy and check after a while that the right one is running)
        run: |
          kubectl apply -f ~/image-classification-continuous-x/deploy_k8s/deployment_k8s.yaml

      - name: Display Docker Logs
        run: |
          docker logs $(docker ps -q -f ancestor=node-0:5000/ml-app:latest) || echo "No Docker container running for ml-app"

      - name: Display Kubernetes Pod Status
        run: |
          kubectl get pods -o wide || echo "Kubernetes pod status not available"

      - name: Display Kubernetes URL
        run: |
          echo http://$(curl -s ifconfig.me/ip):32000
