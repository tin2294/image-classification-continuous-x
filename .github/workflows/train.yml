name: Train Model

on:
  push:
    branches:
      - main
    paths:
        - 'model_train.py'
        - 'utils.py'
jobs:
  train-evaluate:
    runs-on: gpu-p100
    env:
      DATASET_EXISTS: ''

    steps:
      - name: Manage Dataset Volume and Download
        id: manage_dataset
        run: |
          docker run -d --rm --name tensorflow_container \
            -v food11_data:/tmp/content/Food-11 \
            -v saved_models:/tmp/temp_models \
            -w /workspace \
            tensorflow/tensorflow:latest-gpu tail -f /dev/null

          if docker exec tensorflow_container bash -c "[ -d '/tmp/content/Food-11' ] && [ \"\$(ls -A /tmp/content/Food-11)\" ]"; then
            echo "Volume 'food11_data' already contains data. Skipping download."
          else
            echo "Volume 'food11_data' is empty. Downloading dataset."

            docker exec tensorflow_container bash -c "
              set -e;
              echo 'Downloading and setting up dataset...';
              mkdir -p /tmp/content/Food-11 && \
              apt-get update && \
              pip3 install gdown && \
              gdown https://drive.google.com/uc?id=1dt3CD3ICdLbTf80sNJ25TPBDKu_qyCnq -O /tmp/content/Food-11/dataset.zip && \
              unzip /tmp/content/Food-11/dataset.zip -d /tmp/content/Food-11 && \
              echo 'Dataset downloaded and unzipped. Files included:' && \
              ls -la /tmp/content/Food-11;
            "

            echo "Organizing the downloaded data..."
            docker exec tensorflow_container python workspace/src/image-classification-continuous-x/organize_data.py
          fi

          docker exec tensorflow_container bash -c "
            apt-get update && apt-get install -y git;
            if [ -d 'workspace/src/image-classification-continuous-x' ]; then
              echo 'Repository already exists. Updating...';
              cd /workspace/image-classification-continuous-x && git pull origin main;
            else
              echo 'Cloning repository...';
              git clone https://github.com/tin2294/image-classification-continuous-x.git workspace/src/image-classification-continuous-x;
            fi
          "

      - name: Install Dependencies
        run: |
          docker exec tensorflow_container pip install -r workspace/src/image-classification-continuous-x/requirements_docker.txt

      - name: Run Training Script
        run: |
          docker exec tensorflow_container python workspace/src/image-classification-continuous-x/model_train.py
        env:
          STORAGE_PATH: /home/cc/models

      - name: Set Accuracy as Environment Variable
        run: |
          EVALUATION_ACCURACY=$(docker exec tensorflow_container cat /tmp/temp_models/evaluation_metrics.txt | grep "evaluation_accuracy" | cut -d' ' -f2)
          EVALUATION_LOSS=$(docker exec tensorflow_container cat /tmp/temp_models/evaluation_metrics.txt | grep "evaluation_loss" | cut -d' ' -f2)
          echo "Extracted evaluation_accuracy: $EVALUATION_ACCURACY"
          echo "Extracted evaluation_loss: $EVALUATION_LOSS"
          echo "ACCURACY=$EVALUATION_ACCURACY" >> $GITHUB_ENV
          echo "LOSS=$EVALUATION_LOSS" >> $GITHUB_ENV

      - name: Stop Container
        run: |
          docker stop tensorflow_container

      - name: Move ModelStore from volume to the server filesystem
        run: |
          docker run --rm -v saved_models:/volume -v /tmp:/backup busybox tar czf /backup/volume_backup.tar.gz -C /volume .

      - name: Rsync ModelStore from GPU to Node-0
        run: |
          rsync -avz -e ssh /tmp/volume_backup.tar.gz cc@node-0:/tmp/

  redeploy:
    runs-on: node-0
    needs: train-evaluate
    # fix accuracy threshold and other conditions
    if: success()
    steps:
      - name: Move ModelStore to container
        run: |
          docker run --rm -v models:/volume -v /tmp:/backup busybox tar xzf /backup/volume_backup.tar.gz -C /volume
          echo "Checking volume content:"
          docker run --rm -v models:/volume busybox ls /volume

      - name: Deploy Model
        run: |
          python /path/to/deploy_model.py

      - name: Build and push Docker image
        run: |
            docker build -t node-0:5000/ml-app:latest app
            docker push node-0:5000/ml-app:latest

      - name: Redeploy ML App
        run: |
          echo "Accuracy meets threshold, triggering redeployment..."

          kubectl apply -f ~/image-classification-continuous-x/deploy_k8s/deployment_k8s.yaml

      - name: Display Docker Logs
        run: |
          docker logs $(docker ps -q -f ancestor=node-0:5000/ml-app:latest) || echo "No Docker container running for ml-app"

      - name: Display Kubernetes Pod Status
        run: |
          kubectl get pods -o wide || echo "Kubernetes pod status not available"

      - name: Display Kubernetes URL
        run: |
          echo http://$(curl -s ifconfig.me/ip):32000
